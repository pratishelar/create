{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nexport class ErrorInterceptor {\n  constructor(router) {\n    this.router = router;\n  }\n  intercept(request, next) {\n    return next.handle(request).pipe(catchError(error => {\n      if (error) {\n        switch (error.status) {\n          case 400:\n            // this.toastr.error(error.statusText, error.status);\n            break;\n          case 401:\n            // this.toastr.error(error.statusText, error.status);\n            break;\n          case 404:\n            this.router.navigateByUrl('/not-found');\n            break;\n          case 500:\n            console.log(error);\n            break;\n          default:\n            // this.toastr.error('something went wrong');\n            console.log(error);\n            break;\n        }\n      }\n      return throwError(error);\n    }));\n  }\n}\nErrorInterceptor.ɵfac = function ErrorInterceptor_Factory(t) {\n  return new (t || ErrorInterceptor)(i0.ɵɵinject(i1.Router));\n};\nErrorInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ErrorInterceptor,\n  factory: ErrorInterceptor.ɵfac\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}